import numpy as np
def PIVOT (a,b):
    n=len(a)
    red=abs(np.array(a))
    ord=[]
    aux=[]
    for i in range(n):
        for j in range(n):
            if red[j][0]!=0:   
               aux.append(red[j][0]/max(red[j]))
            if red[j][0]==0:
                aux.append(0)
        q= np.where(aux==max(aux))
        t = ''.join(map(str, q))
        t=eval(t)
        ord.append(t[0]) 
        aux.clear()
        red[q]=0
        red=red.tolist()
        for j in range(len(red)):
            del red[j][0]
        red=np.array(red)
    auxr=[]
    for i in ord:
        auxr.append(a[i])
    auxr2=[]
    for i in ord:
        auxr2.append(b[i])
    return(auxr,auxr2)

def G_S_N (mx,res):
    print("MÃ©todo Gauss-Seidel con numpy ordenaDO por columnas\n")
    m_np,r_np=PIVOT(mx,res)
    m_np=np.array(m_np)
    r_np=np.array(r_np)
    x=np.array([0.0 for i in range(len(mx))])
    aux=np.array([1.0 for i in range(len(mx))])
    for i in range(len(mx)-1):
        if len(mx[i]) != len(mx[i+1]):
            print("\n Solo se aceptan matrices cuadradas.")
            return
        if len(mx) != len(res):
            print("Verifique que tiene la misma cantidad de ecuaciones que de resultados")
            return
    for ite in range(10000):
        for i in range(len(mx)):
            aux[i]=0.0
            x[i] = (r_np[i] - np.sum(x*aux*m_np[i,:]))/m_np[i][i]
            aux[i]=1
        r_act = np.dot(m_np,x)
        result = np.sum(np.abs(r_act-r_np))
        if result==0:
            break
    for i in range(len(mx)):
        print("x_",i+1,"=",x[i],"\n")
        
G_S_N([[3,8,4],[7,9,7],[2,3,8]],[3,5,6])
